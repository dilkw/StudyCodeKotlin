plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    //id 'kotlin-kapt'
}

apply plugin: 'com.dilkw.dilkwGradlePlugin'

dilkwExtension {
    name 'dilkw?'
}

android {
    namespace 'com.dilkw.studycodekotlin'
    compileSdk 33

    defaultConfig {
        applicationId "com.dilkw.studycodekotlin"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            // Specifies the path to your keystore file.
            storeFile file("../keystore/debug_keystore.jks")
            // Specifies the password for your keystore.
            storePassword "dilkw250469"
            // Specifies the identifying name for your key.
            keyAlias "studycodekotlin_debug_key"
            // Specifies the password for your key.
            keyPassword "dilkw250469"
        }
    }

    // 构建类型，常用类型包括
    //      默认类型：debug（测试版） release（发布版）
    //      自定义 name { 属性 }
    buildTypes {

        debug {
            // Adds the "release" signing configuration to the release build type.
            signingConfig signingConfigs.debug
        }

        internal {
            initWith debug
            signingConfig signingConfigs.debug
        }

        free {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    dataBinding {
        enabled true
    }

    packagingOptions {
        resources.excludes += "DebugProbesKt.bin"
    }
}

configurations.all {
    // 指定使用依赖包的版本
    resolutionStrategy {
        force 'androidx.media:media:1.0.0'
        //force 'androidx.core:core:1.7.0'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def nav_version = "2.5.2"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //Android官方流式布局
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    // android 音乐播放器依赖
    implementation 'com.google.android.exoplayer:exoplayer:2.18.5'

    //implementation 'androidx.media:media:1.0.0'

    // okhttp依赖
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'

    // flexbox流式布局依赖（google官方出品：https://github.com/google/flexbox-layout）
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3')

    // retrofit依赖
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // gson依赖
    //implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // HLS 流媒体
    implementation "androidx.media3:media3-exoplayer-hls:1.1.0"
    implementation "androidx.media3:media3-exoplayer:1.1.0"
    implementation "androidx.media3:media3-exoplayer-dash:1.1.0"
    implementation "androidx.media3:media3-ui:1.1.0"

}

// 自定义任务示例
task printlnString() {
    println "aaa"

    doFirst {
        println "bbb"
    }

    doLast {
        println "ccc"
    }



    // 执行 ./gradlew 后输出结果为：aaa ddd
    // 执行 ./gradlew printlnString后输出结果为：aaa ddd bbb ccc
}

// gradle plugin (gradle插件)
// 自定义名为 dilkwGradlePlugin 的插件
//class dilkwGradlePlugin implements Plugin<Project> {
//    @Override
//    void apply(Project target) {
//        def extension = target.extensions.create("dilkwExtension", DilkwExtension)
//        // 注意这里需要通过afterEvaluate将扩展中执行的代码放到扩展使用后再执行
//        target.afterEvaluate {
//            println "hello ${extension.name}"
//        }
//    }
//}
//
//// 使用名为 dilkwGradlePlugin 插件
//apply plugin: dilkwGradlePlugin
//
//// 自定义扩展， 其实在 build.gradle文件中编写的 android、dependencies等都可以说是扩展
//// 自定义名为 dilkwExtension 的扩展
//class DilkwExtension {
//    def name = 'dilkw'
//}